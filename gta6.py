from rich.console import Console
import time
import random
import os

# Python is a high-level, general-purpose programming language. 
# Its design philosophy emphasizes code readability with the use of significant indentation.
# Python is dynamically type-checked and garbage-collected. 
# It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. 
# It is often described as a "batteries included" language due to its comprehensive standard library.
# BUT python is gay because of "pip install numpy pandas matplotlib seaborn scipy scikit-learn tensorflow keras flask django requests beautifulsoup4 lxml pillow pyqt5 sqlalchemy pytest jupyterlab plotly sympy opencv-python opencv-contrib-python pillow pydantic fastapi pyyaml boto3 sqlalchemy alembic gunicorn celery pytest-django pytest-cov flake8 black isort pylint mypy coverage sphinx sphinx-rtd-theme sphinx-autodoc-typehints pre-commit"
class GTA6:
    # Just init, nothing special
    def __init__(self):
        self.console = Console()
        os_type = os.name

    # I don't like apt but apt moo is best command ever
    def ascii_art(self):
        art = r"""
                 (__) 
                 (oo) 
           /------\/ 
          / |    ||   
         *  /\---/\ 
            ~~   ~~ üêÑ
        """
        self.console.print(art)

    # Generate powerful massive
    def _generate_arrays(self, num_arrays=5, array_length=10):
        return [[random.randint(0, 100) for _ in range(array_length)] for _ in range(num_arrays)]

    # Better manual input, not [1, 2, 3] just 1 2 3
    def _input_array(self):
        while True:
            self.console.print("[bold cyan]–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª:[/bold cyan]")
            raw = input(">>> ")
            try:
                nums = list(map(int, raw.split()))
                if not nums:
                    raise ValueError("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥")
                return [nums]
            except ValueError:
                self.console.print("[bold red]–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.[/bold red]")

    def find_strongest(self, arrays: list[list[int]]) -> tuple[list[int], int]:
        sums = [sum(arr) for arr in arrays]
        best_idx = max(range(len(sums)), key=lambda i: sums[i])
        best_arr = arrays[best_idx]
        return best_arr, max(best_arr)

    # Powerfull and rich loading bar
    def rich_loading(self, text, result_label, result, delay=True):
        if delay:
            with self.console.status(text, spinner="dots", spinner_style="magenta"):
                time.sleep(2)
            self.console.print(f"[bold green]{result_label}[/bold green] {result}\n")
        else:
            self.console.print(f"[bold green]{result_label}[/bold green] {result}\n")

    # Select what you want do
    def select_input_mode(self):
        self.console.print("[bold yellow]–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –≤–≤–µ–¥–µ–Ω–Ω—è:[/bold yellow]")
        self.console.print("1. –í–∏–ø–∞–¥–∫–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–∞—Å–∏–≤—ñ–≤")
        self.console.print("2. –†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É")
        self.console.print("3. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        self.console.print("4. –î—ñ—ó –∑ —Ñ–∞–π–ª–æ–º")
        self.console.print("5. –í–∏–π—Ç–∏ (–î–æ —Ç–µ—Å—Ç—É –∫–ª–∞—Å—É Student)")

        choice = input(">>> ").strip()
        if choice == '1':
            self.do_arrays(user_input = False)
            return True
        elif choice == '2':
            self.do_arrays(user_input = True)
            return True
        elif choice == '3':
            self.calculator()
            return True
        elif choice == '4':
            self.choice_file()
            return True
        elif choice == '5':
            return False
        else:
            self.console.print("[bold red]–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.[/bold red]")
            return self.select_input_mode()

    # Calculator, no more
    def calculator(self):
        self.console.print("[bold yellow]–í–≤–µ–¥—ñ—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ (exit —â–æ–± –≤–∏–π—Ç–∏): [/bold yellow] ")
        while True:
            try:
                –Ω–µ_–ø—Ä–∏–¥—É–º–∞–≤ = input('>>> ').strip()
                if –Ω–µ_–ø—Ä–∏–¥—É–º–∞–≤ == 'exit':
                    break
                elif –Ω–µ_–ø—Ä–∏–¥—É–º–∞–≤ == '':
                    continue
                result = eval(–Ω–µ_–ø—Ä–∏–¥—É–º–∞–≤)
                print(result)
            except ZeroDivisionError:
                self.console.print("[bold red]–¢–∏ —à–æ –∑–¥—É—Ä—ñ–≤?[/bold red]")
            except UnicodeDecodeError:
                self.console.print("[bold red]–°–ª—É—Ö–∞–π, —Ç—É—Ç —â–æ—Å—å –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑[/bold red]")
            except Exception as e:
                if str(e) == "unterminated string literal (detected at line 1) (<string>, line 1)":
                    self.console.print("[bold red]–®–æ—Å—å —Ç—É—Ç –Ω–µ —Ç–µ —Ç–∏ –ø–∏—à–∏—à[/bold red]")
                elif str(e) == "invalid syntax (<string>, line 1)":
                    self.console.print("[bold red]–ü–æ–º–∏–ª–∫–∞: –Ü–Ω–≤–∞–ª—ñ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –¥—ñ–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ / –∞ –Ω–µ :, —è–∫—â–æ —Ü–µ –Ω–µ –∑ –¥—ñ–ª–µ–Ω–Ω—è–º –ø—Ä–æ–±–ª–µ–º–∏, —Ç–æ –Ω–∞–¥—ñ—é—Å—å –≤–∏ —ó—Ö —è–∫–æ—Å—å —Å–∞–º—ñ —Ç–∞–º –≤–∏–ø—Ä–∞–≤–∏—Ç–µ[/bold red]")
                else:
                    self.console.print(f"[bold red]–ü–æ–º–∏–ª–∫–∞: {str(e)}[/bold red]")

    def choice_file(self):
        self.console.print("[bold yellow]–ü–µ—Ä–µ–Ω–µ—Å—ñ—Ç—å —Ñ–∞–π–ª —Å—é–¥–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ–∞–π–ª—É[/bold yellow]")
        file_path = input().strip().strip('"').strip("'")

        if not file_path:
            arrays = self._generate_arrays()
            flat = [num for sublist in arrays for num in sublist]
            file_path = "file.txt"
            with open(file_path, 'w') as f:
                f.write("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!\n")
                f.write(' '.join(map(str, flat)))
            self.file_autocreated = True
        else:
            if not os.path.exists(file_path):
                self.console.print("[bold yellow]–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª[/bold yellow]")
                return

        self.console.print("[bold yellow]1. –í–∏—á–∏—Å–ª–∏—Ç–∏ —Å—É–º—É —á–∏—Å–µ–ª[/bold yellow]")
        self.console.print("[bold yellow]2. –í–∏–≤–µ—Å—Ç–∏ –≤–º—ñ—Å—Ç[/bold yellow]")
        choice = input(">>> ").strip()

        if choice == '1':
            with open(file_path) as f:
                lines = f.readlines()
                if len(lines) > 1:
                    numbers = list(map(int, lines[1].split()))
                    self.delete_system32(file_path, numbers)
        elif choice == '2':
            self.delete_system32(file_path, None)

    def delete_system32(self, file: str, flat = None):
        if not flat:
            with open(file, 'r') as file:
                content = file.read()
                print(content)
        else:
            print(sum(flat))

    def do_arrays(self, user_input: bool):
        if not user_input:
            delay = True
            arrays = self._generate_arrays()
        else:
            delay = False
            arrays = self._input_array()

        best_arr, best_num = self.find_strongest(arrays)
        print()
        self.rich_loading("üèÜ –ü–æ—à—É–∫ –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–æ–≥–æ –º–∞—Å–∏–≤—É...", "üèÜ –ù–ê–ô–ü–û–¢–£–ñ–ù–Ü–®–ò–ô –ú–ê–°–ò–í:", best_arr, delay=delay)
        self.rich_loading("üëë –ü–æ—à—É–∫ –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–æ–≥–æ —á–∏—Å–ª–∞...", "üëë –ù–ê–ô–ü–û–¢–£–ñ–ù–Ü–®–ï –ß–ò–°–õ–û:", best_num, delay=delay)

    # Start GTA VI
    def start(self):
        self.ascii_art()
        if not self.select_input_mode():
            return

        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø—ñ—Ç–∏ –¥–∞–ª—ñ, –≤ —Å–∫–ª–∞–¥–Ω–∏–π –ø—É—Ç—å, —è–∫–∏–π —ñ–Ω–æ–¥—ñ –Ω–µ —î —à–ª—è—Ö–æ–º –¥–æ —É—Å–ø—ñ—Ö—É...")

        os.system('cls' if os.name == 'nt' else 'clear')

        time.sleep(1)
        self.console.print("–î–∞–ª—ñ —Ç—É—Ç —Å—Ç—É–¥–µ–Ω—Ç —è–∫–∏–π—Å—å –π–¥–µ, —è–∫–∏–π –ø–æ–≥–∞–Ω–æ –≤—á–∏—Ç—å—Å—è, –Ω–∞–¥—ñ—é—Å—å –π–æ–≥–æ –Ω–µ –≤—ñ–¥—Ä–∞—Ö—É—é—Ç—å /n")
        time.sleep(1)
        print()

class Student:
    def __init__(self, name: str, age: int, course: int): # –¢–∏–ø—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≤ python: üò± :horror: üò±
        self.name = name
        self.age = age
        self.course = course
    
    def get_info(self):
        self.checks()
        if isinstance(self.course, int):
            return f"–°—Ç—É–¥–µ–Ω—Ç {self.name}, {self.age} —Ä–æ–∫—ñ–≤, {self.course} –∫—É—Ä—Å."
        else:
            return f"–°—Ç—É–¥–µ–Ω—Ç {self.name}, {self.age} —Ä–æ–∫—ñ–≤, {self.course}."

    def change_course(self, new_course):
        self.course = new_course
        self.checks()

    def checks(self):
        self.check_me()
        self.check_course()

    def check_me(self):
        if self.age == 15 and self.course == 1 and self.name == "–û–ª–µ–∫—Å—ñ–π":
            self.course = "–í—ñ–¥—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ " + str(self.course) + " –∫—É—Ä—Å—ñ" + " üò±"

    def check_course(self):
        if isinstance(self.course, int) and self.course > 4:
            self.course = "–í—ñ–¥—Ä–∞—Ö–æ–≤–∞–Ω–æ –∑ –≥—Ä–∞–º–æ—Ç–æ—é –ø—Ä–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è"

if __name__ == '__main__':
    game = GTA6()
    game.choice_file()
